[{"path":"https://mattheaphy.github.io/offsetreg/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 offsetreg authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/articles/usage.html","id":"when-offsetreg-is-not-necessary","dir":"Articles","previous_headings":"","what":"When offsetreg is not necessary","title":"When to use offsetreg","text":"certain use cases, offsets supported tidymodels. Generally speaking, models allow offsets specified model formula, tidymodels works fine box offsetreg needed. glm() function stats package good example .","code":""},{"path":"https://mattheaphy.github.io/offsetreg/articles/usage.html","id":"offsets-supported-in-model-formulas-glm","dir":"Articles","previous_headings":"When offsetreg is not necessary","what":"Offsets supported in model formulas: glm()","title":"When to use offsetreg","text":", Poisson model fit using us_deaths data set offset equal log population. code works reasons: fit() captures formula expression passed , formula allowed contain calls functions, like offset(). Since additional pre-processing data required, formula passed glm() function -, shown call printed . Let’s assume want use recipe pre-process data. example , bare bones recipe used verify can reproduce coefficients original example. Unfortunately, creates problem recipe() doesn’t allow -line functions like offset(). hint explains, error can avoided removing call offset() recipe passing second formula add_model() part workflow. Note variable passed offset() must still included recipe. coefficients match first example without recipe, know model set correctly.","code":"library(parsnip) library(offsetreg) library(broom) library(recipes) library(workflows) library(rsample) library(tune)  us_deaths$log_pop <- log(us_deaths$population)  poisson_reg() |>   set_engine(\"glm\") |>   fit(deaths ~ gender + age_group + year + offset(log_pop),        data = us_deaths) #> parsnip model object #>  #>  #> Call:  stats::glm(formula = deaths ~ gender + age_group + year + offset(log_pop),  #>     family = stats::poisson, data = data) #>  #> Coefficients: #>    (Intercept)      genderMale  age_group35-44  age_group45-54  age_group55-64   #>     -18.337940        0.327632        0.442935        1.212463        1.990698   #> age_group65-74  age_group75-84    age_group85+            year   #>       2.713410        3.645763        4.770408        0.005683   #>  #> Degrees of Freedom: 139 Total (i.e. Null);  131 Residual #> Null Deviance:       51700000  #> Residual Deviance: 237800    AIC: 239800 mod <- poisson_reg() |> set_engine(\"glm\") rec <- recipe(deaths ~ gender + age_group + year + offset(log_pop),                data = us_deaths) #> Error in `recipe()`: #> ✖ Misspelled variable name or in-line functions detected. #> ℹ The following function/misspelling was found: `offset`. #> ℹ Use steps to do transformations instead. #> ℹ If your modeling engine uses special terms in formulas, pass that formula to #>   workflows as a model formula (`?parsnip::model_formula()`). rec <- recipe(deaths ~ gender + age_group + year + log_pop,                data = us_deaths)  workflow() |>    add_model(mod,              formula = deaths ~ gender + age_group + year + offset(log_pop)) |>    add_recipe(rec) |>    fit(us_deaths) #> ══ Workflow [trained] ══════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: poisson_reg() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 0 Recipe Steps #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #>  #> Call:  stats::glm(formula = deaths ~ gender + age_group + year + offset(log_pop),  #>     family = stats::poisson, data = data) #>  #> Coefficients: #>    (Intercept)      genderMale  age_group35-44  age_group45-54  age_group55-64   #>     -18.337940        0.327632        0.442935        1.212463        1.990698   #> age_group65-74  age_group75-84    age_group85+            year   #>       2.713410        3.645763        4.770408        0.005683   #>  #> Degrees of Freedom: 139 Total (i.e. Null);  131 Residual #> Null Deviance:       51700000  #> Residual Deviance: 237800    AIC: 239800"},{"path":"https://mattheaphy.github.io/offsetreg/articles/usage.html","id":"offsets-not-supported-in-model-formulas-glmnet","dir":"Articles","previous_headings":"When offsetreg is not necessary","what":"Offsets not supported in model formulas: glmnet()","title":"When to use offsetreg","text":"modeling engines allow offsets passed via formula interface. example, glmnet() function accept formulas; requires model matrices. Instead, offsets passed numeric vector using optional engine-specific offset argument. code works argument offset = us_deaths$log_pop captured passed directly glmnet(). try use recipe offset passed formula argument add_model(), difficult--spot problem emerges. model runs without errors, completely different set coefficients returned. happened ? Since glmnet() doesn’t natively support formula interface, doesn’t know offset() term passed formula. hood, offset() term quietly dropped call model.matrix() used convert formula matrix format acceptable glmnet(). result, model exactly see offset terms begin . situation offsetreg required.","code":"poisson_reg(penalty = 1E-5) |>   set_engine(\"glmnet\", offset = us_deaths$log_pop) |>   fit(deaths ~ year + gender + age_group,        data = us_deaths) |>    tidy() #> Loaded glmnet 4.1-8 #> # A tibble: 9 × 3 #>   term            estimate penalty #>   <chr>              <dbl>   <dbl> #> 1 (Intercept)    -17.7     0.00001 #> 2 year             0.00540 0.00001 #> 3 genderMale       0.326   0.00001 #> 4 age_group35-44   0.338   0.00001 #> 5 age_group45-54   1.11    0.00001 #> 6 age_group55-64   1.89    0.00001 #> 7 age_group65-74   2.62    0.00001 #> 8 age_group75-84   3.55    0.00001 #> 9 age_group85+     4.68    0.00001 mod_glmnet <- poisson_reg(penalty = 1E-5) |> set_engine(\"glmnet\") rec <- recipe(deaths ~ year + gender + age_group + log_pop,                data = us_deaths)  workflow() |>    add_model(mod_glmnet,              formula = deaths ~ year + gender + age_group + offset(log_pop)) |>    add_recipe(rec) |>    fit(us_deaths) |>    tidy() #> # A tibble: 9 × 3 #>   term           estimate penalty #>   <chr>             <dbl>   <dbl> #> 1 (Intercept)    -42.9    0.00001 #> 2 year             0.0263 0.00001 #> 3 genderMale       0.0243 0.00001 #> 4 age_group35-44   0.303  0.00001 #> 5 age_group45-54   1.12   0.00001 #> 6 age_group55-64   1.85   0.00001 #> 7 age_group65-74   2.19   0.00001 #> 8 age_group75-84   2.45   0.00001 #> 9 age_group85+     2.71   0.00001 model.matrix(deaths ~ year + gender + age_group + offset(log_pop),              us_deaths) |>    head() #>   (Intercept) year genderMale age_group35-44 age_group45-54 age_group55-64 #> 1           1 2011          0              0              0              0 #> 2           1 2012          0              0              0              0 #> 3           1 2013          0              0              0              0 #> 4           1 2014          0              0              0              0 #> 5           1 2015          0              0              0              0 #> 6           1 2016          0              0              0              0 #>   age_group65-74 age_group75-84 age_group85+ #> 1              0              0            0 #> 2              0              0            0 #> 3              0              0            0 #> 4              0              0            0 #> 5              0              0            0 #> 6              0              0            0"},{"path":"https://mattheaphy.github.io/offsetreg/articles/usage.html","id":"when-offsetreg-is-necessary","dir":"Articles","previous_headings":"","what":"When offsetreg is necessary","title":"When to use offsetreg","text":"offsetreg becomes necessary underlying modeling engine support offsets formulas either tasks performed: pre-processing recipe applied data Resampling performed, often conjunction hyperparameter tuning","code":""},{"path":"https://mattheaphy.github.io/offsetreg/articles/usage.html","id":"using-recipe-when-offsets-cannot-be-specified-in-a-formula","dir":"Articles","previous_headings":"When offsetreg is necessary","what":"Using recipe() when offsets cannot be specified in a formula","title":"When to use offsetreg","text":"Let’s continue last example. problem can addressed using offsetreg follows: Replace poisson_reg() poisson_reg_offset() Replace “glmnet” engine “glmnet_offset” provide name offset column Remove formula argument add_model() Add call step_dummy(). step previously necessary formula passed add_model().","code":"mod_offset <- poisson_reg_offset(penalty = 1E-5) |>    set_engine(\"glmnet_offset\", offset_col = \"log_pop\") rec <- recipe(deaths ~ year + gender + age_group + log_pop,                data = us_deaths) |>    step_dummy(all_nominal_predictors())  workflow() |>    add_model(mod_offset) |>    add_recipe(rec) |>    fit(us_deaths) |>    tidy() #> # A tibble: 9 × 3 #>   term              estimate penalty #>   <chr>                <dbl>   <dbl> #> 1 (Intercept)      -17.7     0.00001 #> 2 year               0.00540 0.00001 #> 3 gender_Male        0.326   0.00001 #> 4 age_group_X35.44   0.338   0.00001 #> 5 age_group_X45.54   1.11    0.00001 #> 6 age_group_X55.64   1.89    0.00001 #> 7 age_group_X65.74   2.62    0.00001 #> 8 age_group_X75.84   3.55    0.00001 #> 9 age_group_X85.     4.68    0.00001"},{"path":"https://mattheaphy.github.io/offsetreg/articles/usage.html","id":"resampling-when-offsets-cannot-be-specified-in-a-formula","dir":"Articles","previous_headings":"When offsetreg is necessary","what":"Resampling when offsets cannot be specified in a formula","title":"When to use offsetreg","text":"models like glmnet() offsets can specified numeric vector engine-specific arguments, resampling presents challenges: tidymodels aware numeric vector offsets passed defined relationship individual observations associated offsets. result, resampling occurs, offsets aren’t carried resampled data sets. Related, pertinent glmnet(), predict() function requires offset terms, mechanism pass along, result error. happens attempt fit 5 bootstrap resamples us_deaths data set without offsetreg. models failed fit, receive specific error message offsets available predictions. offsetreg, code performs expected. offsetreg works behind scenes ensures offset terms attached data times, enables resampling predictions function without error.","code":"resamples <- bootstraps(us_deaths, times = 5)  mod_glmnet <- poisson_reg(penalty = 1E-5) |>    set_engine(\"glmnet\", offset = us_deaths$log_pop)  workflow() |>   add_recipe(rec) |>   add_model(mod_glmnet) |>   fit_resamples(resamples) |>   collect_metrics() #> → A | error:   No newoffset provided for prediction, yet offset used in fit of glmnet #> There were issues with some computations   A: x1 #> There were issues with some computations   A: x5 #>  #> Warning: All models failed. Run `show_notes(.Last.tune.result)` for more #> information. #> Error in `estimate_tune_results()`: #> ! All models failed. Run `show_notes(.Last.tune.result)` for more information. show_notes(.Last.tune.result) #> unique notes: #> ────────────────────────────────────────────────────────────────────── #> No newoffset provided for prediction, yet offset used in fit of glmnet workflow() |>     add_recipe(rec) |>     add_model(mod_offset) |>     fit_resamples(resamples) |>     collect_metrics() #> # A tibble: 2 × 6 #>   .metric .estimator      mean     n    std_err .config              #>   <chr>   <chr>          <dbl> <int>      <dbl> <chr>                #> 1 rmse    standard   26396.        5 3385.      Preprocessor1_Model1 #> 2 rsq     standard       0.979     5    0.00313 Preprocessor1_Model1"},{"path":"https://mattheaphy.github.io/offsetreg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Heaphy. Author, maintainer, copyright holder.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Heaphy M (2025). offsetreg: Extension 'Tidymodels' Supporting Offset Terms. R package version 1.1.1, https://mattheaphy.github.io/offsetreg/, https://github.com/mattheaphy/offsetreg/.","code":"@Manual{,   title = {offsetreg: An Extension of 'Tidymodels' Supporting Offset Terms},   author = {Matt Heaphy},   year = {2025},   note = {R package version 1.1.1, https://mattheaphy.github.io/offsetreg/},   url = {https://github.com/mattheaphy/offsetreg/}, }"},{"path":"https://mattheaphy.github.io/offsetreg/index.html","id":"offsetreg","dir":"","previous_headings":"","what":"An Extension of Tidymodels Supporting Offset Terms","title":"An Extension of Tidymodels Supporting Offset Terms","text":"package extends tidymodels ecosystem enable usage predictive models offset terms. Offset terms predictors linear model known priori value. words, terms associated coefficient (βi\\beta_i) needs determined. generalized linear model (GLM), offset specification looks like: Ŷ=g−1(offset+β0+β1X1+β2X2+…+βpXp) \\hat{Y} = g^{-1}(offset + \\beta_0 + \\beta_1X_1 + \\beta_2X_2 + \\ldots + \\beta_pX_p) Models offsets useful working count data fitting adjustment model top existing model prior expectation. former situation common insurance data often aggregated weighted exposures. latter common life insurance industry mortality tables often used starting point setting assumptions particular block business. general, offsetreg functions named existing functions tidymodels modeling packages suffixed _offset (_exposure). modeling engines package wrappers around existing, well-known modeling functions. engines include argument offset_col (exposure_col) used specify column data passed engine contains offsets. Currently, following model specifications engines available: poisson_reg_offset() - create Poisson GLM spec. Engines: glm_offset - wrapper around stats::glm() glmnet_offset - wrapper around glmnet::glmnet() boost_tree_offset() - create ensemble boosted Poisson decision trees. Engines: xgboost_offset - wrapper around xgboost::xgb.train() decision_tree_exposure() - create Poisson decision tree weighted exposures. Engines: rpart_exposure - wrapper around rpart::rpart()","code":""},{"path":"https://mattheaphy.github.io/offsetreg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An Extension of Tidymodels Supporting Offset Terms","text":"offsetreg package can installed CRAN : can install development version offsetreg GitHub :","code":"install.packages(\"offsetreg\") # install.packages(\"devtools\") devtools::install_github(\"mattheaphy/offsetreg\")"},{"path":"https://mattheaphy.github.io/offsetreg/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"An Extension of Tidymodels Supporting Offset Terms","text":"us_deaths data set contains United States deaths, population estimates, crude mortality rates ages 25+ CDC Multiple Causes Death Files years 2011-2020. Assume want create poisson model number deaths. First, offset term created taking natural log population, exposure basis. natural log used link function poisson regression exponential function. Create poisson regression model offset, set engine “glm_offset”. engine-specific argument offset_col must refer name column us_deaths contains offsets. Note: offset term always included model formulas. Verify coefficients match stats::glm().","code":"library(offsetreg) library(parsnip)  us_deaths #> # A tibble: 140 × 6 #>    gender age_group  year deaths population       qx #>    <fct>  <fct>     <int>  <dbl>      <dbl>    <dbl> #>  1 Female 25-34      2011  13663   20746335 0.000659 #>  2 Female 25-34      2012  13808   20970529 0.000658 #>  3 Female 25-34      2013  14001   21203096 0.000660 #>  4 Female 25-34      2014  14480   21546290 0.000672 #>  5 Female 25-34      2015  15736   21838064 0.000721 #>  6 Female 25-34      2016  17359   22077505 0.000786 #>  7 Female 25-34      2017  18066   22351311 0.000808 #>  8 Female 25-34      2018  17980   22487065 0.000800 #>  9 Female 25-34      2019  17827   22581141 0.000789 #> 10 Female 25-34      2020  21654   22625267 0.000957 #> # ℹ 130 more rows us_deaths$offset <- log(us_deaths$population) glm_off <- poisson_reg_offset() |>   # set the modeling engine and specify the offset column   set_engine(\"glm_offset\", offset_col = \"offset\") |>   # always include the offset term in the model formula   fit(deaths ~ gender + age_group + year + offset, data = us_deaths)  glm_off #> parsnip model object #>  #>  #> Call:  stats::glm(formula = formula, family = family, data = data, weights = weights,  #>     offset = offset) #>  #> Coefficients: #>    (Intercept)      genderMale  age_group35-44  age_group45-54  age_group55-64   #>     -18.337940        0.327632        0.442935        1.212463        1.990698   #> age_group65-74  age_group75-84    age_group85+            year   #>       2.713410        3.645763        4.770408        0.005683   #>  #> Degrees of Freedom: 139 Total (i.e. Null);  131 Residual #> Null Deviance:       51700000  #> Residual Deviance: 237800    AIC: 239800 glm_base <- glm(deaths ~ gender + age_group + year, offset = offset,                 data = us_deaths, family = 'poisson')  identical(extract_fit_engine(glm_off) |> coef(), coef(glm_base)) #> [1] TRUE"},{"path":"https://mattheaphy.github.io/offsetreg/reference/boost_tree_offset.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosted Poisson Trees with Offsets — boost_tree_offset","title":"Boosted Poisson Trees with Offsets — boost_tree_offset","text":"boost_tree_offset() defines model creates series Poisson decision trees pre-defined offsets forming ensemble. tree depends results previous trees. trees ensemble combined produce final prediction. function can used count regression models .","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/boost_tree_offset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boosted Poisson Trees with Offsets — boost_tree_offset","text":"","code":"boost_tree_offset(   mode = \"regression\",   engine = \"xgboost_offset\",   mtry = NULL,   trees = NULL,   min_n = NULL,   tree_depth = NULL,   learn_rate = NULL,   loss_reduction = NULL,   sample_size = NULL,   stop_iter = NULL )"},{"path":"https://mattheaphy.github.io/offsetreg/reference/boost_tree_offset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boosted Poisson Trees with Offsets — boost_tree_offset","text":"mode single character string type model. possible value model \"regression\" engine single character string specifying computational engine use fitting. mtry number number (proportion) predictors randomly sampled split creating tree models (specific engines ). trees integer number trees contained ensemble. min_n integer minimum number data points node required node split . tree_depth integer maximum depth tree (.e. number splits) (specific engines ). learn_rate number rate boosting algorithm adapts iteration--iteration (specific engines ). sometimes referred shrinkage parameter. loss_reduction number reduction loss function required split (specific engines ). sample_size number number (proportion) data exposed fitting routine. xgboost, sampling done iteration C5.0 samples training. stop_iter number iterations without improvement stopping (specific engines ).","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/boost_tree_offset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boosted Poisson Trees with Offsets — boost_tree_offset","text":"model specification object classes boost_tree_offset model_spec.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/boost_tree_offset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boosted Poisson Trees with Offsets — boost_tree_offset","text":"function similar parsnip::boost_tree() except specification offset column required.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/offsetreg/reference/boost_tree_offset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boosted Poisson Trees with Offsets — boost_tree_offset","text":"","code":"parsnip::show_model_info(\"boost_tree_offset\") #> Information for `boost_tree_offset` #>  modes: unknown, regression  #>  #>  engines:  #>    regression: xgboost_offset¹ #>  #> ¹The model can use case weights. #>  #>  arguments:  #>    xgboost_offset:  #>       tree_depth     --> max_depth #>       trees          --> nrounds #>       learn_rate     --> eta #>       mtry           --> colsample_bynode #>       min_n          --> min_child_weight #>       loss_reduction --> gamma #>       sample_size    --> subsample #>       stop_iter      --> early_stop #>  #>  fit modules: #>            engine       mode #>    xgboost_offset regression #>  #>  prediction modules: #>          mode         engine      methods #>    regression xgboost_offset numeric, raw #>   boost_tree_offset() #> Boosted Tree with Offsets Model Specification (regression) #>  #> Computational engine: xgboost_offset  #>"},{"path":"https://mattheaphy.github.io/offsetreg/reference/decision_tree_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Decision Trees with Exposures — decision_tree_exposure","title":"Poisson Decision Trees with Exposures — decision_tree_exposure","text":"decision_tree_exposure() defines Poisson decision tree model weighted exposures (observation times).","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/decision_tree_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson Decision Trees with Exposures — decision_tree_exposure","text":"","code":"decision_tree_exposure(   mode = \"regression\",   engine = \"rpart_exposure\",   cost_complexity = NULL,   tree_depth = NULL,   min_n = NULL )"},{"path":"https://mattheaphy.github.io/offsetreg/reference/decision_tree_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson Decision Trees with Exposures — decision_tree_exposure","text":"mode single character string type model. possible value model \"regression\" engine single character string specifying computational engine use fitting. cost_complexity positive number cost/complexity parameter (.k.. Cp) used CART models (specific engines ). tree_depth integer maximum depth tree. min_n integer minimum number data points node required node split .","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/decision_tree_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson Decision Trees with Exposures — decision_tree_exposure","text":"model specification object classes decision_tree_exposure model_spec.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/decision_tree_exposure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poisson Decision Trees with Exposures — decision_tree_exposure","text":"function similar parsnip::decision_tree() except specification exposure column required.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/offsetreg/reference/decision_tree_exposure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson Decision Trees with Exposures — decision_tree_exposure","text":"","code":"parsnip::show_model_info(\"decision_tree_exposure\") #> Information for `decision_tree_exposure` #>  modes: unknown, regression  #>  #>  engines:  #>    regression: rpart_exposure¹ #>  #> ¹The model can use case weights. #>  #>  arguments:  #>    rpart_exposure:  #>       cost_complexity --> cp #>       min_n           --> minsplit #>       tree_depth      --> maxdepth #>  #>  fit modules: #>            engine       mode #>    rpart_exposure regression #>  #>  prediction modules: #>          mode         engine      methods #>    regression rpart_exposure numeric, raw #>   decision_tree_exposure() #> Poisson Decision Tree with Offsets Model Specification (regression) #>  #> Computational engine: rpart_exposure  #>"},{"path":"https://mattheaphy.github.io/offsetreg/reference/glm_offset.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Generalized Linear Models with an Offset — glm_offset","title":"Fit Generalized Linear Models with an Offset — glm_offset","text":"function wrapper around stats::glm() uses column data offset.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/glm_offset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Generalized Linear Models with an Offset — glm_offset","text":"","code":"glm_offset(   formula,   family = \"gaussian\",   data,   offset_col = \"offset\",   weights = NULL )"},{"path":"https://mattheaphy.github.io/offsetreg/reference/glm_offset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Generalized Linear Models with an Offset — glm_offset","text":"formula model formula family function character string describing link function error distribution. data Optional. data frame containing variables used model. offset_col Character string. name column data containing offsets. weights Optional weights use fitting process.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/glm_offset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Generalized Linear Models with an Offset — glm_offset","text":"glm object. See stats::glm() full details.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/glm_offset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Generalized Linear Models with an Offset — glm_offset","text":"Outside tidymodels ecosystem, glm_offset() advantages stats::glm() since function allows offsets specified formula interface offset argument. Within tidymodels, glm_offset() provides advantage ensure offsets included data whenever resamples created. formula, family, data, weights arguments meanings stats::glm(). See function's documentation full details.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/offsetreg/reference/glm_offset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Generalized Linear Models with an Offset — glm_offset","text":"","code":"us_deaths$off <- log(us_deaths$population) glm_offset(deaths ~ age_group + gender, family = \"poisson\",            us_deaths, offset_col = \"off\") #>  #> Call:  stats::glm(formula = formula, family = family, data = data, weights = weights,  #>     offset = offset) #>  #> Coefficients: #>    (Intercept)  age_group35-44  age_group45-54  age_group55-64  age_group65-74   #>        -6.8842          0.4426          1.2114          1.9908          2.7147   #> age_group75-84    age_group85+      genderMale   #>         3.6465          4.7707          0.3280   #>  #> Degrees of Freedom: 139 Total (i.e. Null);  132 Residual #> Null Deviance:\t    51700000  #> Residual Deviance: 245000 \tAIC: 246900"},{"path":"https://mattheaphy.github.io/offsetreg/reference/glmnet_offset.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Penalized Generalized Linear Models with an Offset — glmnet_offset","title":"Fit Penalized Generalized Linear Models with an Offset — glmnet_offset","text":"function wrapper around glmnet::glmnet() uses column x offset.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/glmnet_offset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Penalized Generalized Linear Models with an Offset — glmnet_offset","text":"","code":"glmnet_offset(   x,   y,   family,   offset_col = \"offset\",   weights = NULL,   lambda = NULL,   alpha = 1 )"},{"path":"https://mattheaphy.github.io/offsetreg/reference/glmnet_offset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Penalized Generalized Linear Models with an Offset — glmnet_offset","text":"x Input matrix y Response variable family function character string describing link function error distribution. offset_col Character string. name column data containing offsets. weights Optional weights use fitting process. lambda numeric vector regularization penalty values alpha number zero one denoting proportion L1 (lasso) versus L2 (ridge) regularization. alpha = 1: Pure lasso model alpha = 0: Pure ridge model","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/glmnet_offset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Penalized Generalized Linear Models with an Offset — glmnet_offset","text":"glmnet object. See glmnet::glmnet() full details.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/glmnet_offset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Penalized Generalized Linear Models with an Offset — glmnet_offset","text":"Outside tidymodels ecosystem, glmnet_offset() advantages glmnet::glmnet() since function allows offsets specified offset argument. Within tidymodels, glmnet_offset() provides advantage ensure offsets included data whenever resamples created. x, y, family, lambda, alpha weights arguments meanings glmnet::glmnet(). See function's documentation full details.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/offsetreg/reference/glmnet_offset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Penalized Generalized Linear Models with an Offset — glmnet_offset","text":"","code":"us_deaths$off <- log(us_deaths$population) x <- model.matrix(~ age_group + gender + off, us_deaths)[, -1] glmnet_offset(x, us_deaths$deaths, family = \"poisson\", offset_col = \"off\") #>  #> Call:  glmnet::glmnet(x = x, y = y, family = family, weights = weights,      offset = offsets, alpha = alpha, lambda = lambda)  #>  #>    Df  %Dev Lambda #> 1   0  0.00 159700 #> 2   1 19.30 145600 #> 3   1 29.40 132600 #> 4   1 35.78 120800 #> 5   1 40.18 110100 #> 6   2 44.76 100300 #> 7   2 52.46  91410 #> 8   2 58.11  83290 #> 9   2 62.41  75890 #> 10  2 65.75  69150 #> 11  2 68.40  63010 #> 12  3 70.59  57410 #> 13  4 73.19  52310 #> 14  4 76.34  47660 #> 15  4 78.94  43430 #> 16  4 81.10  39570 #> 17  4 82.91  36050 #> 18  4 84.42  32850 #> 19  4 85.70  29930 #> 20  4 86.77  27270 #> 21  5 87.80  24850 #> 22  5 88.77  22640 #> 23  6 89.91  20630 #> 24  6 91.14  18800 #> 25  6 92.19  17130 #> 26  6 93.08  15610 #> 27  6 93.85  14220 #> 28  6 94.50  12960 #> 29  6 95.05  11810 #> 30  6 95.52  10760 #> 31  6 95.92   9802 #> 32  6 96.27   8931 #> 33  6 96.56   8138 #> 34  6 96.80   7415 #> 35  6 97.01   6756 #> 36  6 97.19   6156 #> 37  6 97.34   5609 #> 38  7 97.48   5111 #> 39  7 97.75   4657 #> 40  7 98.00   4243 #> 41  7 98.21   3866 #> 42  7 98.39   3523 #> 43  7 98.55   3210 #> 44  7 98.69   2925 #> 45  7 98.81   2665 #> 46  7 98.91   2428 #> 47  7 99.00   2212 #> 48  6 99.08   2016 #> 49  6 99.13   1837 #> 50  6 99.17   1674 #> 51  6 99.21   1525 #> 52  6 99.24   1389 #> 53  6 99.26   1266 #> 54  6 99.29   1153 #> 55  6 99.30   1051 #> 56  6 99.32    958 #> 57  6 99.33    873 #> 58  7 99.36    795 #> 59  7 99.38    724 #> 60  7 99.41    660 #> 61  7 99.42    601 #> 62  7 99.44    548 #> 63  7 99.45    499 #> 64  7 99.46    455 #> 65  7 99.47    414 #> 66  7 99.48    378 #> 67  7 99.49    344 #> 68  7 99.49    314 #> 69  7 99.50    286 #> 70  7 99.50    260 #> 71  7 99.51    237 #> 72  7 99.51    216 #> 73  7 99.51    197 #> 74  7 99.51    179 #> 75  7 99.52    164"},{"path":"https://mattheaphy.github.io/offsetreg/reference/offsetreg-package.html","id":null,"dir":"Reference","previous_headings":"","what":"offsetreg: An Extension of 'Tidymodels' Supporting Offset Terms — offsetreg-package","title":"offsetreg: An Extension of 'Tidymodels' Supporting Offset Terms — offsetreg-package","text":"Extend 'tidymodels' ecosystem https://www.tidymodels.org/ enable creation predictive models offset terms. Models offsets useful working count data fitting adjustment model top existing model prior expectation. former situation common insurance data often weighted exposures. latter common life insurance industry mortality tables often used starting point setting assumptions.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/offsetreg/reference/offsetreg-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"offsetreg: An Extension of 'Tidymodels' Supporting Offset Terms — offsetreg-package","text":"Maintainer: Matt Heaphy mattrmattrs@gmail.com [copyright holder]","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/poisson_reg_offset.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson regression models with offsets — poisson_reg_offset","title":"Poisson regression models with offsets — poisson_reg_offset","text":"poisson_reg_offset() defines generalized linear model count data offset follows Poisson distribution.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/poisson_reg_offset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson regression models with offsets — poisson_reg_offset","text":"","code":"poisson_reg_offset(   mode = \"regression\",   penalty = NULL,   mixture = NULL,   engine = \"glm_offset\" )"},{"path":"https://mattheaphy.github.io/offsetreg/reference/poisson_reg_offset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson regression models with offsets — poisson_reg_offset","text":"mode single character string type model. possible value model \"regression\". penalty non-negative number representing total amount regularization (glmnet ). mixture number zero one (inclusive) giving proportion L1 regularization (.e. lasso) model. mixture = 1 specifies pure lasso model, mixture = 0  specifies ridge regression model, 0 < mixture < 1 specifies elastic net model, interpolating lasso ridge. Available glmnet spark . engine single character string specifying computational engine use fitting.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/poisson_reg_offset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson regression models with offsets — poisson_reg_offset","text":"model specification object classes poisson_reg_offset model_spec.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/poisson_reg_offset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poisson regression models with offsets — poisson_reg_offset","text":"function similar parsnip::poisson_reg() except specification offset column required.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/offsetreg/reference/poisson_reg_offset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson regression models with offsets — poisson_reg_offset","text":"","code":"parsnip::show_model_info(\"poisson_reg_offset\") #> Information for `poisson_reg_offset` #>  modes: unknown, regression  #>  #>  engines:  #>    regression: glm_offset¹, glmnet_offset¹ #>  #> ¹The model can use case weights. #>  #>  arguments:  #>    glmnet_offset:  #>       penalty --> lambda #>       mixture --> alpha #>  #>  fit modules: #>           engine       mode #>       glm_offset regression #>    glmnet_offset regression #>  #>  prediction modules: #>          mode        engine      methods #>    regression    glm_offset numeric, raw #>    regression glmnet_offset numeric, raw #>   poisson_reg_offset() #> Poisson Regression with Offsets Model Specification (regression) #>  #> Computational engine: glm_offset  #>"},{"path":"https://mattheaphy.github.io/offsetreg/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics min_grid parsnip check_args, translate","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/rpart_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson Recursive Partitioning and Regression Trees with Exposures — rpart_exposure","title":"Poisson Recursive Partitioning and Regression Trees with Exposures — rpart_exposure","text":"function wrapper around rpart::rpart() Poisson regression trees using weighted exposures (observation times).","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/rpart_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson Recursive Partitioning and Regression Trees with Exposures — rpart_exposure","text":"","code":"rpart_exposure(   formula,   data,   exposure_col = \"exposure\",   weights = NULL,   control,   cost,   shrink = 1,   ... )"},{"path":"https://mattheaphy.github.io/offsetreg/reference/rpart_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson Recursive Partitioning and Regression Trees with Exposures — rpart_exposure","text":"formula model formula contains single response variable left-hand side. data Optional. data frame containing variables used model. exposure_col Character string. name column data containing exposures. weights Optional weights use fitting process. control list hyperparameters. See rpart::rpart.control(). cost vector non-negative costs variable model. shrink Optional parameter splitting function. Coefficient variation prior distribution. ... Alternative input arguments passed rpart::rpart.control().","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/rpart_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson Recursive Partitioning and Regression Trees with Exposures — rpart_exposure","text":"rpart model","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/rpart_exposure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poisson Recursive Partitioning and Regression Trees with Exposures — rpart_exposure","text":"Outside tidymodels ecosystem, rpart_exposure() advantages rpart::rpart() since function allows exposures specified formula interface passing cbind(exposure, y) response variable. Within tidymodels, rpart_exposure() provides advantage ensure exposures included data whenever resamples created. formula, data, weights, control, cost arguments meanings rpart::rpart(). shrink passed rpart::rpart()'s parms argument via named list. See function's documentation full details.","code":""},{"path":[]},{"path":"https://mattheaphy.github.io/offsetreg/reference/rpart_exposure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson Recursive Partitioning and Regression Trees with Exposures — rpart_exposure","text":"","code":"rpart_exposure(deaths ~ age_group + gender, us_deaths,                exposure_col = \"population\") #> n= 140  #>  #> node), split, n, deviance, yval #>       * denotes terminal node #>  #>  1) root 140 51701770.0 0.012433090   #>    2) age_group=25-34,35-44,45-54,55-64,65-74 100 10090330.0 0.005996979   #>      4) age_group=25-34,35-44,45-54 60  1037681.0 0.002401215   #>        8) age_group=25-34,35-44 40   219942.2 0.001550297 * #>        9) age_group=45-54 20   102550.3 0.004096230 * #>      5) age_group=55-64,65-74 40  1598645.0 0.012700650   #>       10) age_group=55-64 20   246107.6 0.008899093 * #>       11) age_group=65-74 20   237356.1 0.018263680 * #>    3) age_group=75-84,85+ 40  4697172.0 0.073516860   #>      6) age_group=75-84 20   170261.7 0.045847100 * #>      7) age_group=85+ 20    45488.2 0.137105000 *"},{"path":"https://mattheaphy.github.io/offsetreg/reference/us_deaths.html","id":null,"dir":"Reference","previous_headings":"","what":"United States Deaths 2011-2020 — us_deaths","title":"United States Deaths 2011-2020 — us_deaths","text":"United States deaths, population estimates, crude mortality rates ages 25+ CDC Multiple Causes Death Files.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/us_deaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"United States Deaths 2011-2020 — us_deaths","text":"","code":"us_deaths"},{"path":"https://mattheaphy.github.io/offsetreg/reference/us_deaths.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"United States Deaths 2011-2020 — us_deaths","text":"data frame 140 rows 6 columns. gender Gender age_group Attained age groups year Calendar year deaths Number deaths population Population estimate qx Crude mortality rate equal deaths / population","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/us_deaths.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"United States Deaths 2011-2020 — us_deaths","text":"Centers Disease Control Prevention, National Center Health Statistics. National Vital Statistics System, Mortality 1999-2020 CDC WONDER Online Database, released 2021. Data Multiple Cause Death Files, 1999-2020, compiled data provided 57 vital statistics jurisdictions Vital Statistics Cooperative Program. Accessed http://wonder.cdc.gov/mcd-icd10.html Jan 15, 2024.\"","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/xgb_train_offset.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosted Poisson Trees with Offsets via xgboost — xgb_train_offset","title":"Boosted Poisson Trees with Offsets via xgboost — xgb_train_offset","text":"xgb_train_offset() xgb_predict_offset() wrappers xgboost tree-based models model arguments main function. functions nearly identical parsnip functions parsnip::xgb_train() parsnip::xg_predict_offset() except objective \"count:poisson\" passed xgboost::xgb.train() offset term added data set.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/xgb_train_offset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boosted Poisson Trees with Offsets via xgboost — xgb_train_offset","text":"","code":"xgb_train_offset(   x,   y,   offset_col = \"offset\",   weights = NULL,   max_depth = 6,   nrounds = 15,   eta = 0.3,   colsample_bynode = NULL,   colsample_bytree = NULL,   min_child_weight = 1,   gamma = 0,   subsample = 1,   validation = 0,   early_stop = NULL,   counts = TRUE,   ... )  xgb_predict_offset(object, new_data, offset_col = \"offset\", ...)"},{"path":"https://mattheaphy.github.io/offsetreg/reference/xgb_train_offset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boosted Poisson Trees with Offsets via xgboost — xgb_train_offset","text":"x data frame matrix predictors y vector (numeric) matrix (numeric) outcome data. offset_col Character string. name column data containing offsets. weights numeric vector weights. max_depth integer maximum depth tree. nrounds integer number boosting iterations. eta numeric value zero one control learning rate. colsample_bynode Subsampling proportion columns node within tree. See counts argument . default uses columns. colsample_bytree Subsampling proportion columns tree. See counts argument . default uses columns. min_child_weight numeric value minimum sum instance weights needed child continue split. gamma number minimum loss reduction required make partition leaf node tree subsample Subsampling proportion rows. default, training data used. validation proportion data used performance assessment potential early stopping. early_stop integer NULL. NULL, number training iterations without improvement stopping. validation used, performance base validation set; otherwise, training set used. counts logical. FALSE, colsample_bynode colsample_bytree assumed proportions proportion columns affects (instead counts). ... options pass xgb.train() xgboost's method predict(). object xgboost object. new_data New data predictions. Can data frame, matrix, xgb.DMatrix","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/xgb_train_offset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boosted Poisson Trees with Offsets via xgboost — xgb_train_offset","text":"fitted xgboost object.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/reference/xgb_train_offset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boosted Poisson Trees with Offsets via xgboost — xgb_train_offset","text":"","code":"us_deaths$off <- log(us_deaths$population) x <- model.matrix(~ age_group + gender + off, us_deaths)[, -1]  mod <- xgb_train_offset(x, us_deaths$deaths, \"off\",                         eta = 1, colsample_bynode = 1,                         max_depth = 2, nrounds = 25,                         counts = FALSE)  xgb_predict_offset(mod, x, \"off\") #>   [1]  86917.36  87856.75  88831.02  90268.80  91491.18  92494.47  93641.54 #>   [8]  94210.34  94604.33  94789.28  32818.43  32719.24  32662.38  32737.09 #>  [15]  32789.09  32678.39  32982.15  33278.13  33562.50  33921.54  74569.45 #>  [22]  73790.58  72925.19  72384.32  71909.84  71223.78  70527.45  69285.33 #>  [29]  68012.13  67153.13 145755.89 147822.38 150606.58 153536.02 156549.61 #>  [36] 158776.39 160801.28 161806.72 162365.67 162106.05 161415.55 171863.98 #>  [43] 180423.08 188895.03 197082.48 204894.67 212519.39 218433.97 225662.45 #>  [50] 233487.92 270470.00 271263.03 273451.59 277127.31 281051.25 286639.03 #>  [57] 295249.28 308080.94 319192.50 328322.53 486268.75 496409.81 505989.22 #>  [64] 512867.00 520395.28 525788.94 530030.50 533801.06 535023.19 536953.31 #>  [71] 104308.39 105768.89 107269.27 108898.67 110529.01 112018.90 113959.95 #>  [78] 115047.35 115783.27 116205.40  48726.80  48606.59  48538.31  48571.93 #>  [85]  48678.86  48556.37  49077.60  49604.14  50096.76  50708.27  85581.42 #>  [92]  84756.04  83831.90  83272.05  82781.30  82032.50  81256.07  79836.87 #>  [99]  78401.77  77440.64 160666.69 162808.19 165905.03 169100.42 172538.61 #> [106] 175026.88 177291.45 178525.95 179404.23 179318.72 226630.16 242347.41 #> [113] 255214.25 267142.56 278895.47 289684.75 300198.97 308180.25 317990.84 #> [120] 328460.00 298893.75 302922.44 308948.88 316074.59 323057.00 331279.03 #> [127] 343668.12 361214.72 375329.59 387399.72 272258.25 282321.62 293497.50 #> [134] 303141.19 312546.25 319811.97 327692.84 334308.69 341610.16 347101.94"},{"path":"https://mattheaphy.github.io/offsetreg/news/index.html","id":"offsetreg-111","dir":"Changelog","previous_headings":"","what":"offsetreg 1.1.1","title":"offsetreg 1.1.1","text":"Behind--scenes compatibility update parsnip 1.3.0, now minimum required version.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/news/index.html","id":"offsetreg-110","dir":"Changelog","previous_headings":"","what":"offsetreg 1.1.0","title":"offsetreg 1.1.0","text":"CRAN release: 2024-04-11 boost_tree_offset() - new model specification boosted ensembles decision trees. Currently xgboost (“xgboost_offset”) supported. decision_tree_exposure() - new model specification weighted decision trees weighted exposures. Currently rpart (“rpart_exposure”) supported. Added vignette offsetreg shouldn’t used. Added check_args() methods various model specifications.","code":""},{"path":"https://mattheaphy.github.io/offsetreg/news/index.html","id":"offsetreg-100","dir":"Changelog","previous_headings":"","what":"offsetreg 1.0.0","title":"offsetreg 1.0.0","text":"CRAN release: 2024-01-23 Initial CRAN release offsetreg includes one model specification, poisson_reg_offset() support two engines: glm_offset() glmnet_offset(), wrappers around stats::glm() glmnet::glmnet(), respectively.","code":""}]
